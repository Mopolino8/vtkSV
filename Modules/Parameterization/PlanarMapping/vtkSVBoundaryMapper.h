/*=========================================================================

  Program:   Visualization Toolkit
  Module:    vtkSVBoundaryMapper.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
/**
 * @class   vtkSVBoundaryMapper
 * @brief   base class for boundary mapping filters
 *
 * vtkSVBoundaryMapper is an abstract class that defines
 * the protocol for suboundary mapping surface filters.
 *
*/

#ifndef vtkSVBoundaryMapper_h
#define vtkSVBoundaryMapper_h

#include "vtkFiltersGeneralModule.h" // For export macro
#include "vtkPolyDataAlgorithm.h"

#include "vtkEdgeTable.h"
#include "vtkIntArray.h"

class vtkSVBoundaryMapper : public vtkPolyDataAlgorithm
{
public:
  vtkTypeMacro(vtkSVBoundaryMapper,vtkPolyDataAlgorithm);
  void PrintSelf(ostream& os, vtkIndent indent) VTK_OVERRIDE;

  // Boundary Corners
  vtkGetObjectMacro(BoundaryIds, vtkIntArray);
  vtkSetObjectMacro(BoundaryIds, vtkIntArray);

  // Boundary Corners
  vtkGetObjectMacro(EdgeTable, vtkEdgeTable);
  vtkSetObjectMacro(EdgeTable, vtkEdgeTable);

  // Boolean array indicating boundary nodes
  vtkGetObjectMacro(IsBoundary, vtkDataArray);
  vtkSetObjectMacro(IsBoundary, vtkDataArray);

  // Axis of the object to use on orientation with sphee map
  vtkSetVector3Macro(ObjectXAxis, double);
  vtkSetVector3Macro(ObjectZAxis, double);

  // Description:
  // Internal ids array name, generated by GenerateIdFilter
  vtkGetStringMacro(InternalIdsArrayName);
  vtkSetStringMacro(InternalIdsArrayName);

  static int CheckSurface(vtkPolyData *pd);
  static int RunLoopFind(vtkPolyData *pd, vtkIdType startPt, vtkIdType nextCell,
                         vtkPolyData *loop);
  static int CheckArrayExists(vtkPolyData *pd, int datatype, std::string arrayname);

protected:
  vtkSVBoundaryMapper();
  ~vtkSVBoundaryMapper() VTK_OVERRIDE;

  // Usual data generation method
  int RequestData(vtkInformation *vtkNotUsed(request),
		  vtkInformationVector **inputVector,
		  vtkInformationVector *outputVector) VTK_OVERRIDE;

  int RemoveInternalIds;

  int PrepFilter();
  int RunFilter();
  int GetBoundaryLoop();
  int FindBoundaries();
  int RunLoopFind();
  virtual int SetBoundaries() = 0;

  vtkPolyData  *InitialPd;
  vtkPolyData  *BoundaryPd;
  vtkEdgeTable *EdgeTable;
  vtkIntArray  *BoundaryIds;
  vtkDataArray *IsBoundary;

  vtkPolyData  *Boundaries;
  vtkPolyData  *BoundaryLoop;

  double ObjectXAxis[3];
  double ObjectZAxis[3];

  char *InternalIdsArrayName;
private:
  vtkSVBoundaryMapper(const vtkSVBoundaryMapper&) VTK_DELETE_FUNCTION;
  void operator=(const vtkSVBoundaryMapper&) VTK_DELETE_FUNCTION;
};

#endif
